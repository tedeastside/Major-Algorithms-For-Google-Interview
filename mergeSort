public static int[] mergeArrays(int[] arr1, int[] arr2) {
		int i=0;
		int j=0, k=0;
//		i is for arr1, j is for arr2 and k is for final ans
		int ans[] = new int[arr1.length+arr2.length];
		
//		Comparing each index of two arrays and putting it in our final ans
 		while(i<arr1.length && j<arr2.length) {
			if(arr1[i]<arr2[j]) {
				ans[k]=arr1[i];
				i++;
				k++;
			}else {
				ans[k]=arr2[j];
				k++;
				j++;
			}
		}
 		
// 		in case elements of arr1 are left in the array
 		while(i<arr1.length) {
 			ans[k]=arr1[i];
 			i++;
 			k++;
 		}
// 		incase elements of arr2 are left in the array
 		while(j<arr2.length) {
 			ans[k]=arr2[j];
 			j++;
 			k++;
 		}
 		
// 		Note only one or none of the above loop will ran because one or both of the array is done making its copy because of && gate
 		return ans;
	}
	
	public static int[] mergeSort(int[] arr) {
		if(arr.length<=1) {
			return arr;
		}
//		Getting the midIndex of array
		int mI = arr.length/2;
//		Creating two arrays with respective length
		int[] arr1 = new int[mI];
		int arr2[] = new int[arr.length-mI];
		
//		Copying elements from input arrays to new array
		for(int i=0;i<arr.length;i++) {
			if(i<arr1.length) {
				arr1[i]=arr[i];
			}else {
				arr2[i-mI]=arr[i];
			}
		}
		
//		recursive call to get two sorted arrays and at last merging them 
		arr1 = mergeSort(arr1);
		arr2 = mergeSort(arr2);
		int[] ans = mergeArrays(arr1, arr2);
		return ans;
	}
